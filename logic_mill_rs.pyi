from typing import Self

class LogicMill:
    def __init__(self, rules: str, initial_state: str = "INIT", halt_state: str = "HALT", blank_symbol: str = "_") -> None:
        ...

    def run(self, input_tape: str, max_steps: int = 2_000_000, verbose: bool = False) -> str:
        ...

    def unused_rules(self) -> list[tuple[str, str]]:
        ...

    def state_count(self) -> int:
        ...

    def __getstate__(self) -> bytes:
        ...

    def __setstate__(self, state: bytes) -> None:
        ...

    def __reduce__(self) -> tuple[Self, tuple, bytes]:
        ...

class InvalidTransitionError(Exception):
    ...

class MissingTransitionError(Exception):
    ...

class InvalidSymbolError(Exception):
    ...
